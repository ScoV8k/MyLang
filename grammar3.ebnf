program ::= { function_def };

block ::= "{", { block_statement }, "}" ;

block_statement ::= declaration 
                  | assignment 
                  | if_statement 
                  | while_loop 
                  | for_each_loop
                  | type_match 
                  | return_statement ;

declaration ::= parameter, [ "=", expression ], ";" ;
assignment ::= obj_access, [ "=", expression ], ";" ;

if_statement ::= "if", "(", expression, ")", block, [ "else", block ] ;
while_loop ::= "while", "(", expression, ")", block ;

for_each_loop ::= "for", "each", "(", identifier, ",", identifier, ")", "in", expression, block ;

return_statement ::= "return", [ expression ], ";" ;

function_def ::= func_type, identifier, "(", [ parameters ], ")", block ;
parameters ::= parameter, { ",", parameter } ;
parameter ::= type, identifier ;
identifier_or_function_call ::= identifier, [ "(", [ arguments ], ")" ] ; 
function_call ::= identifier, "(", [ arguments ], ")" ;
arguments ::= expression, { ",", expression } ;

type_match ::= "match", expression, [ "as", identifier ], "{", { match_case }, "}" ; 
match_case ::= type, "=>", block
             | "null", "=>", block
             | "_", "=>", block ;

expression ::= or_expression ;
or_expression ::= and_expression, { "||", and_expression } ;
and_expression ::= equality_expression, { "&&", equality_expression } ;
equality_expression ::= relational_expression, [ "==" | "!=", relational_expression ] ;
relational_expression ::= add_expression, [ "<" | ">" | "<=" | ">=", add_expression ] ;
add_expression ::= mul_expression, { "+" | "-", mul_expression } ;
mul_expression ::= unary_expression, { "*" | "/", unary_expression } ;
unary_expression ::= [ "-" | "not" | "!" ], type_expression ;
type_expression ::= factor, [ "is", type ] ;

factor ::= literal | "(", expression, ")", | obj_access ;

obj_access ::= identifier_or_function_call, { ".", identifier_or_function_call } ;
item ::= identifier_or_function_call ;

func_type ::= type | "void";
type ::= "int" | "float" | "bool" | "string" | "dict" | "variant";

dictionary ::= "{", [ dict_entries ], "}" ;
dict_entries ::= expression, ":", expression, { ",", expression, ":", expression } ;


literal ::= integer | float | bool | string | dictionary;
float ::= integer, ".", digit, { digit } ;
integer  ::= zero | (non_zero_digit, {digit}) ;
bool ::= "true" | "false" ;
string ::= '"', { any_character - '"' }, '"' ;

identifier ::= letter, { letter | digit | "_" } ;

digit ::= non_zero | zero ;
non_zero ::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
zero ::= "0" ;
letter ::= "A" | "B" | "C" | ... | "Z" | "a" | "b" | "c" | ... | "z" ;
any_character ::= ? all visible characters ? ;
